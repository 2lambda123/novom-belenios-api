service: belenios-api

frameworkVersion: '2'
variablesResolutionMode: 20210326

provider:
  name: aws
  lambdaHashingVersion: 20201221
  ecr:
    images:
      belenios-api:
        path: ./
  environment:
    REGION: ${opt:region, self:provider.region}
    DYNAMODB_REGION: ${opt:region, self:provider.region}
    NODE_ENV: ${file(./src/lib/serverless/getNodeEnv.js)}
    TABLE: "${self:service}-${sls:stage}-app"
    GSI1: "${self:service}-${sls:stage}-gsi1"
    GSI2: "${self:service}-${sls:stage}-gsi2"
    LSI1: "${self:service}-${sls:stage}-lsi1"
    LAMBDA_OPEN_ELECTION: "${self:service}-${sls:stage}-openElection"
    LAMBDA_CLOSE_ELECTION: "${self:service}-${sls:stage}-closeElection"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:ConditionCheckItem
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
      Resource: 
        - "arn:aws:dynamodb:${self:provider.environment.DYNAMODB_REGION}:*:table/${self:provider.environment.TABLE}"
        - "arn:aws:dynamodb:${self:provider.environment.DYNAMODB_REGION}:*:table/${self:provider.environment.TABLE}/index/*"
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
        - "lambda:InvokeAsync"
      Resource: "*"

functions:
  graphql:
    timeout: 29
    image:
      name: ${self:service}
      command: "./src/functions/graphql/index.graphqlHandler"
    events:
      - http:
          path: /
          method: post
          cors:
            origin: ${file(./src/lib/serverless/getCorsSettings.js):getOrigin}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: ${file(./src/lib/serverless/getCorsSettings.js):getCredentials}
      - http:
          path: /
          method: get
          cors:
            origin: ${file(./src/lib/serverless/getCorsSettings.js):getOrigin}
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: ${file(./src/lib/serverless/getCorsSettings.js):getCredentials}
  openElection:
    timeout: 900
    image:
      name: "${self:service}"
      command: "./src/functions/belenios/openElection/index.default"
  closeElection:
    timeout: 900
    image:
      name: "${self:service}"
      command: "./src/functions/belenios/closeElection/index.default"

resources:
  Resources:
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: "${self:provider.environment.TABLE}"
        TimeToLiveSpecification:
          AttributeName: "ttl"
          Enabled: true
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
          - AttributeName: id
            AttributeType: S
          - AttributeName: parentId
            AttributeType: S
          - AttributeName: sort_gsi_2_pk
            AttributeType: S
          - AttributeName: sort_gsi_2_sk
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: "${self:provider.environment.GSI1}"
            KeySchema:
              - AttributeName: parentId
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: "${self:provider.environment.GSI2}"
            KeySchema:
              - AttributeName: sort_gsi_2_pk
                KeyType: HASH
              - AttributeName: sort_gsi_2_sk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        LocalSecondaryIndexes:
          - IndexName: "${self:provider.environment.LSI1}"
            KeySchema:
              - AttributeName: type
                KeyType: HASH
              - AttributeName: parentId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
