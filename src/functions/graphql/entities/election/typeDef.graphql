  type Election {
    id: String!
    status: String
    result: [Int]
    template: Template!
    parent: String
    maxVotes: Int,
    maxVoters: Int,
    ttl: Int,
  }

  input ElectionInput {
    template: TemplateInput!
    parent: String
    ttl: Int,
    votersList: [VoterInput]!
  }

  type ElectionAnalytics {
    votersCount: Int
    votesCount: Int
  }

  input Voter {
    id: String!
    weight: Int!
  }

  input VoterInput {
    id: String!
    weight: Int!
  }

  type Template {
    description: Text,
    name: Text!,
    questions: [Question]!,
  }

  input TemplateInput {
    description: TextInput,
    name: TextInput!,
    questions: [QuestionInput]!,
  }

  type Question {
    answers: [Text]!
    max: Int!,
    min: Int!,
    question: Text!,
  }

  input QuestionInput { 
    answers: [TextInput]!
    max: Int!,
    min: Int!,
    question: TextInput!,
  }

  type Query {
    getElection(id: String!): Election
    getAllElectionWithParent(parent: [String]): [Election]
  }

  type Mutation {
    openElection(election: ElectionInput!): String
    closeElection(id: String!): [Int]
    computeVoters(id: String!): ElectionAnalytics
    joinElection(id: String!): String 
  }
